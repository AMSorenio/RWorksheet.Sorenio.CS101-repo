)
shoedata
MALE <- subset(shoedata, Gender == "M")
FEMALE <- subset(shoedata, Gender == "F")
print("Male Data:")
print(MALE)
print("Female Data:")
print(FEMALE)
MEANSHOE <- mean(shoedata$ShoeSize)
MEANH <- mean(shiedata$Height)
MEANSHOE <- mean(shoedata$ShoeSize)
MEANH <- mean(shoedata$Height)
print(paste("Mean Shoe Size:", MEANSHOE))
print(paste("Mean Height:", MEANH))
relation <- cor(shoedata$ShoeSize, shoedata$Height)
print(paste("Correlation between Shoe Size and Height:", correlation))
relation <- cor(shoedata$ShoeSize, shoedata$Height)
print(paste("Correlation between Shoe Size and Height:", relation))
MONTHS <- c(
"March", "April", "January", "November", "January", "September", "October",
"September", "November", "August", "January", "November", "November",
"February", "May", "August", "July", "December", "August", "August",
"September", "November", "February", "April"
)
factorM <- factor(MONTHS)
print(factorM)
print("Summary of months_vector (character vector):")
summary(MONTHS)
print("Summary of factor_months_vector:")
summary(factorM)
print("Summary of months_vector (character vector):")
summary(MONTHS)
print("Summary of factor_months_vector:")
summary(factorM)
MONTHS <- c(
"March", "April", "January", "November", "January", "September", "October",
"September", "November", "August", "January", "November", "November",
"February", "May", "August", "July", "December", "August", "August",
"September", "November", "February", "April"
)
factor_months_vector <- factor(MONTHS)
print(factor_months_vector)
print("Summary of months_vector (character vector):")
summary(MONTHS)
print("Summary of factor_months_vector:")
summary(factor_months_vector)
print(Summary of months_vector (character vector):)
print("Summary of months_vector (character vector):")
summary(MONTHS)
print("Summary of factor_months_vector:")
summary(factor_months_vector)
direction_data <- c("East", "West", "North")
frequency_data <- c(1, 4, 3)
new_order_data <- factor(direction_data, levels = c("East", "West", "North"))
print(new_order_data)
exceldata <- read.table("import_march.csv", header = TRUE, sep = ",")
View(exceldata)
# a
exceldata <- read.table("import_march.csv", header = TRUE, sep = ",")
View(exceldata)
# b
print(exceldata)
View(exceldata)
# 6. a
exhaustive_search <- function(number) {
if (number < 1 || number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (number == 20) {
return("TRUE")
} else {
return(as.character(number))
}
}
# 6. a
exhaustive_search <- function(number) {
if (number < 1 || number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (number == 20) {
return("TRUE")
} else {
return(as.character(number))
}
}
selected_number <- as.integer(readline(prompt="Please select a number from 1 to 50: "))
exhaustive_search <- function(number) {
if (number < 1 || number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (number == 20) {
return("TRUE")
} else {
return(as.character(number))
}
}
rNumber <- as.integer(readline(prompt = "Enter a random number: "))
cat("Result:", result, "\n")
exhaustive_search <- function(number) {
if (number < 1 || number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (number == 20) {
return("TRUE")
} else {
return(as.character(number))
}
}
rNumber <- as.integer(readline(prompt = "Enter a random number: "))
print("Result:", result, "\n")
randsearch <- function() {
rnumber <- readline(promt="Enter a random numbers beyween 1 and 50:")
if (number < 1 || number > 50) {
print("The number selected is beyond the range of 1 to 50")
} else if (number == 20) {
return("TRUE")
} else {
print(paste("The selected number is", rnumber))
}
}
randsearch()
randsearch <- function() {
rnumber <- readline(promt="Enter a random numbers between 1 and 50:")
if (number < 1 || number > 50) {
print("The number selected is beyond the range of 1 to 50")
} else if (rnumber == 20) {
return("TRUE")
} else {
print(paste("The selected number is", rnumber))
}
}
randsearch()
randsearch <- function() {
rnumber <- readline(prompt="Enter a random numbers between 1 and 50:")
if (number < 1 || number > 50) {
print("The number selected is beyond the range of 1 to 50")
} else if (rnumber == 20) {
return("TRUE")
} else {
print(paste("The selected number is", rnumber))
}
}
randsearch()
randsearch <- function() {
rnumber <- readline(prompt="Enter a random number between 1 and 50:")
if (number < 1 || number > 50) {
print("The number selected is beyond the range of 1 to 50")
} else if (rnumber == 20) {
return("TRUE")
} else {
print(paste("The selected number is", rnumber))
}
}
randsearch()
randsearch <- function() {
rnumber <- readline(prompt="Enter a random number between 1 and 50:")
if (rnumber < 1 || rnumber > 50) {
print("The number selected is beyond the range of 1 to 50")
} else if (rnumber == 20) {
return("TRUE")
} else {
print(paste("The selected number is", rnumber))
}
}
randsearch()
randsearch <- function() {
rnumber <- readline(prompt="Enter a random number between 1 and 50:")
if (rnumber < 1 || rnumber > 50) {
print("The number selected is beyond the range of 1 to 50")
} else if (rnumber == 20) {
return("TRUE")
} else {
print(paste("The selected number is", rnumber))
}
}
randsearch()
min_bills <- function(price) {
bills <- c(1000, 500, 200, 100, 50)
bill_count <- 0
for (bill in bills) {
if (price == 0) break
count <- price %/% bill
bill_count <- bill_count + count
price <- price %% bill
}
cat("Minimum number of bills needed:", bill_count, "\n")
}
price <- as.integer(readline(prompt = "Enter the price of the snack (must be divisible by 50): "))
if (price %% 50 == 0) {
min_bills(price)
} else {
cat("The price must be divisible by 50.\n")
}
price <- as.integer(readline(prompt = "Enter the price of the snack (must be divisible by 50): "))
if (price %% 50 == 0) {
min_bills(price)
} else {
cat("The price must be divisible by 50.\n")
}
minimumbills < - function (price){
Bills < - c(50, 100, 200, 500, 1000)
count < - 0
for (bill in Bills){
count < - count = price %% bill
price < - price %% bill
}
return(count)
}
minimumbills < - function (price){
Bills < - c(50, 100, 200, 500, 1000)
count < - 0
for (bill in Bills){
count < - count = price %% bill
price < - price %% bill
}
return(count)
}
minimumbills <- function (price){
Bills <- c(50, 100, 200, 500, 1000)
count <- 0
for (bill in Bills){
count <- count = price %% bill
price <- price %% bill
}
return(count)
}
sprice <- as.integer(readline(prompt= "Enter the price of the snack: "))
print(paste("Minimum numbe of bills needed: ", minimumbills(sprice)))
minimumbills <- function (price){
Bills <- c(50, 100, 200, 500, 1000)
count <- 0
for (bill in Bills){
count <- count + price %% bill
price <- price %% bill
}
return(count)
}
sprice <- as.integer(readline(prompt= "Enter the price of the snack: "))
print(paste("Minimum numbe of bills needed: ", minimumbills(sprice)))
minimumbills <- function (price){
Bills <- c(50, 100, 200, 500, 1000)
count <- 0
for (bill in Bills){
count <- count + price %% bill
price <- price %% bill
}
return(count)
}
sprice <- as.integer(readline(prompt= "Enter the price of the snack: "))
print(paste("Minimum number of bills needed: ", minimumbills(sprice)))
Grades <- data.frame(
Name = c("Annie", "Thea", "Steve", "Hanna"),
Grade1 = c(85, 65, 75, 95),
Grade2 = c(65, 75, 55, 75),
Grade3 = c(85, 90, 80, 100),
Grade4 = c(100, 90, 85, 90))
Grades
for (i in 1: nrow(grades)){
average <- sum(grades[i, 2:5]) / 4
if (average > 90){
cat(Grades$Name[i], "'s average garde this semester is", average, "\n")
}
}
for (i in 1: nrow(Grades)){
average <- sum(Grades[i, 2:5]) / 4
if (average > 90){
cat(Grades$Name[i], "'s average garde this semester is", average, "\n")
}
}
# 7
library(readxl)
alexa_data <- read_excel("C:\\Users\\User\\Downloads\\alexa_file.xlsx")
alexa_data
data$variation <- gsub("Old Name", "New Name", data$variation)
gencount <- table(data$Gender)
specscounts <- table(iris$Species)
pie(specscounts,
main = "Species Distribution in Iris Dataset",
col = c("salmon", "purple", "lightpink"),
labels = paste(names(specscounts), specscounts))
legend("topright", legend = names(specscounts), fill = c("salmon", "purple", "lightpink"))
setosa <- iris[iris$Species == "setosa", ]
versicolor <- iris[iris$Species == "versicolor", ]
virginica <- iris[iris$Species == "virginica", ]
tail(setosa)
tail(versicolor)
tail(virginica)
iris$Species <- as.factor(iris$Species)
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
pch = 19,
main = "Iris Dataset",
sub = "Sepal Width and Length",
xlab = "Sepal Length",
ylab = "Sepal Width")
legend("topright", legend = levels(iris$Species), col = 1:3, pch = 19)
data <- read_csv("C:/Users/User/Documents/sample_data.csv")
data <- read_csv("C:/Users/User/Documents/sample_data.csv", show_col_types = FALSE)
install.packages("readr")
library(readr)
data <- read_csv("C:/Users/User/Documents/sample_data.csv")
data
data <- read_csv("C:/Users/User/Documents/sample_data.csv", show_col_types = FALSE)
print(head(data, 6))
fem <- subset(data, Gender == "F")
male <- subset(data, Gender == "M")
cat("Female count:", nrow(fem),"\n")
cat("Male count:", nrow(male),"\n")
gencount <- table(data$Gender)
barplot(gencount, main= "Gender Distribution", col = c("red", "blue"),
xlab="Gender", ylab="Count", legend=TRUE)
# 7. a
library(dplyr)
install.packages("dplyr")
library(dplyr)
variationCount <- alexa %>% count(variation)
# 7. a
library(dplyr)
variationCount <- alexa_data %>% count(variation)
# 7
library(readxl)
alexa_data <- read_excel("C:\\Users\\User\\Downloads\\alexa_file.xlsx")
alexa_data
library(dplyr)
variationCount <- alexa_file %>% count(variation)
# 7. a
alexa_data$variation <- gsub("Black\\s+", "Black", alexa$variation)
# 7. a
alexa_data$variation <- gsub("Black\\s+", "Black", alexa_data$variation)
alexa_data$variation <- gsub("White\\s+", "White", alexa_data$variation)
# 7. a
alexa_data$variation <- gsub("Black\\s+", "Black", alexa_data$variation)
alexa_data$variation <- gsub("White\\s+", "White", alexa_data$variation)
# 7. a
alexa_data$variation <- gsub("Black\\s+", "Black", alexa_data$variation)
alexa_data$variation <- gsub("White\\s+", "White", alexa_data$variation)
# 7. b
library(dplyr)
variationCount <- alexa_data %>% count(variation)
save(variationCount, file = "variations.RData")
# 7. b
library(dplyr)
variationCount <- alexa_data %>% count(variation)
save(variationCount, file = "variations.RData")
# 7. c
load("variations.RData")
barplot(variationCount$n, names.arg = variationCount$variation, col = "skyblue", main = "Alexa Variant Distribution", xlab = "Variant", ylab = "Count")
# 7.d
variantCount <- alexa_data %>%
group_by(variation) %>%
summarize(count = n())
black_variants <- variantCount %>%
filter(grepl("Black", variation))
white_variants <- variantCount %>%
filter(grepl("White", variation))
print(black_variants)
print(white_variants)
black_plot <- ggplot(black_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "Black Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
install.packages("ggplot")
install.packages("ggplot2")
black_plot <- ggplot(black_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "Black Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
black_plot <- ggplot(black_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "Black Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
white_plot <- ggplot(white_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "White Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
library(gridExtra)
install.packages("gridExtra")
library(ggplot2)
black_plot <- ggplot(black_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "Black Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
library(ggplot2)
black_plot <- ggplot(black_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "Black Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
library(ggplot2)
black_plot <- ggplot(black_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "Black Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
print(black_plot)
white_plot <- ggplot(white_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "White Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
white_plot <- ggplot(white_variants, aes(x = variation, y = count, fill = variation)) +
geom_bar(stat = "identity") +
labs(title = "White Variants", x = "Values", y = "Total Numbers") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("black", "red", "green", "blue", "cyan"))
print(white_plot)
library(gridExtra)
grid.arrange(black_plot, white_plot, ncol = 2)
# 2
for (i in 1:5) {
for (j in 1:i) {
cat("* ")
}
cat("\n")
}
# 1
vectA <- c(1, 2, 3, 4, 5)
matrixB <- matrix(0, nrow = 5, ncol = 5)
for (i in 1:5) {
for (j in 1:5) {
matrixB[i, j] <- abs(vectA[i] - vectA[j])
}
}
matrixB
# 1
vectA <- c(1, 2, 3, 4, 5)
matrixB <- matrix(0, nrow = 5, ncol = 5)
for (i in 1:5) {
for (j in 1:5) {
matrixB[i, j] <- abs(vectA[i] - vectA[j])
}
}
matrixB
# 3
start1 <- as.integer(readline(prompt="Enter the first number of the Fibonacci sequence: "))
start2 <- as.integer(readline(prompt="Enter the second number of the Fibonacci sequence: "))
fibonacci <- c(start1, start2)
repeat {
next_value <- tail(fibonacci, 2)[1] + tail(fibonacci, 2)[2]
if (next_value > 500) break
fibonacci <- c(fibonacci, next_value)
}
print(fibonacci)
# 4
library(readr)
data <- read_csv("C:/Users/User/Documents/sample_data.csv")
data
# 4
library(readr)
data <- read_csv("C:/Users/User/Documents/sample_data.csv", show_col_types = FALSE)
data
# 3
start1 <- as.integer(readline(prompt="Enter the first number of the Fibonacci sequence: "))
start2 <- as.integer(readline(prompt="Enter the second number of the Fibonacci sequence: "))
fibonacci <- c(start1, start2)
repeat {
next_value <- tail(fibonacci, 2)[1] + tail(fibonacci, 2)[2]
if (is.na(next_value) || next_value > 500) break
fibonacci <- c(fibonacci, next_value)
}
print(fibonacci)
# 1a
library(readr)
mpg <- read.table("mpg.csv", header = TRUE, sep = ",")
# 1a
library(readr)
mpg <- read.table("mpg.csv", header = TRUE, sep = ",")
# 1a
library(readr)
mpg <- read.csv("/cloud/project/mpg.csv")
# 1a
library(readr)
mpg <- read.csv("C:\Users\User\Downloads\mpg.csv")
# 1a
library(readr)
mpg <- read.csv("C:/Users/User/Downloads/mpg.csv")
str(mpg)
# 1b
#The categorical variables in the mpg dataset are manufacturer, model, trans, drv, fl, and class.
# 1c
#The continuous variables in the mpg dataset are displ, cty, and hwy.
# 2
# Manufacturer that has most models
manufacturer_model_count <- table(mpg$manufacturer)
most_models <- names(which.max(manufacturer_model_count))
most_models_count <- max(manufacturer_model_count)
manufacturer_model_count <- table(mpg$manufacturer)
most_models <- names(which.max(manufacturer_model_count))
most_models_count <- max(manufacturer_model_count)
# 2
# Manufacturer that has most models
manufacturer_model_count <- table(mpg$manufacturer)
most_models <- names(which.max(manufacturer_model_count))
most_models_count <- max(manufacturer_model_count)
# Model that has most variations
model_counts <- table(mpg$model)
most_variations_model <- names(which.max(model_counts))
most_variations_count <- max(model_counts)
most_models
most_models_count
most_variations_model
most_variations_count
